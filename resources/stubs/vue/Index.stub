<template>
    <div>
        <div class="content m-1">
            <Breadcrumbs :breadcrumbs="breadcrumbs" :back="route('{{ namespace.models }}.index')" />
            <PageHeading>
                {{ title }}
                <template #actions>
                    <Link
                        class="button button-primary"
                        :href="route('{{ namespace.models }}.create')"
                    >
                        <UserAddIcon class="h-5 w-5 mr-2" aria-hidden="true" />
                        Create {{ Model }}
                    </Link>
                </template>
            </PageHeading>
            <div class="grid grid-cols-12 gap-2 content-center">
                <div class="col-span-12 md:col-span-5">
                    <TextInput
                        v-model="form.search"
                        :isShowLine="false"
                        placeholder="search.."
                    ></TextInput>
                </div>
                <div class="col-span-12 md:col-span-2 flex items-end justify-end">
                    <div>
                        <button
                            @click="clearForm"
                            class="button button-secondary button-small"
                        >
                            Clear
                        </button>
                    </div>
                </div>
            </div>
            <TableDisplayContainer>
                <template #header>
                    <TableTh v-for="(column,index) in columns" :key="index">
                        <div class="flex">
                            <span>{{ column }}</span>
                        </div>
                    </TableTh>
                    <TableTh>Actions</TableTh>
                </template>
                <template #body>
                    <tr
                        v-for="(item, itemIndex) in {{ models }}.data"
                        :key="item"
                        :class="itemIndex % 2 === 0 ? 'bg-white' : 'bg-gray-50'"
                    >
                        {{ tdFields }}
                        <TableTd>
                            <Link :href="route('{{ namespace.models }}.edit', item.id)" class="link">
                                Edit
                            </Link>
                        </TableTd>
                    </tr>
                </template>
                <template #pagination>
                    <Pagination :data="{{ models }}.meta.pagination"></Pagination>
                </template>
            </TableDisplayContainer>
        </div>
    </div>
</template>

<script>
    import Layout from "@/Shared/Layout";
    import Breadcrumbs from "@/Components/Breadcrumbs";
    import mapValues from "lodash/mapValues";
    import Pagination from "@/Components/Pagination";
    import PageHeading from "@/Components/PageHeading";
    import TableDisplayContainer from "@/Components/TableDisplayContainer";
    import TableTh from "@/Components/TableTh";
    import TableTd from "@/Components/TableTd";
    import TextInput from "@/Components/TextInput";
    import SelectInput from "@/Components/SelectInput";
    import { UserAddIcon } from "@heroicons/vue/solid";
    import {Link} from "@inertiajs/inertia-vue3";

    export default {
        name: "{{ Model }}Index",
        layout: Layout,
        components: {
            Pagination,
            PageHeading,
            TableDisplayContainer,
            TableTh,
            TableTd,
            TextInput,
            SelectInput,
            Breadcrumbs,
            UserAddIcon,
        },
        props: {
            {{ models }}: Object,
            filters: Object,
            title: String,
        },
        data() {
            return {
                form: {
                    search: this.filters.search ?? "",
                },
                breadcrumbs: [{ name: '{{ Models }}', href: "#" }],
                columns:[{{ columns }}],
            };
        },
        methods: {
            remove{{ Model }}: function ({{ model }}) {
                if (confirm("Are you sure to remove this {{ model }}?")) {
                    {{ model }}._method = "DELETE";
                    this.$inertia.post(route("{{ namespace.models }}.destroy", {{ model }}), {{ model }});
                }
            },
            clearForm: function () {
                this.form = mapValues(this.form, () => "");
            },
            debounceSearch() {
                clearTimeout(this.debounce);
                this.debounce = setTimeout(() => {
                    this.typing = null;
                    this.sendRequest();
                }, 500);
            },
            sendRequest() {
                this.$inertia.replace(this.route("{{ namespace.models }}.index", this.form));
            },

        },
        watch: {
            form: {
                handler: function () {
                    this.debounceSearch();
                },
                deep: true,
            },
        },
        computed:{
        }
    };
</script>

